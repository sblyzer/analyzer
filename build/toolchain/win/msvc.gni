template("win_msvc_toolchain") {
  toolchain(target_name) {
    cl = invoker.cl
    lib = invoker.lib
    link = invoker.link
    ml = invoker.ml

    cc_wrapper = ""
    cl_m32_flag = ""
    env_setup = ""
    stamp = "cmd.exe /c echo >"

    tool("asm") {
        command = "$env_setup $ml {{asmflags}} /nologo /c /Fo {{output}} {{source}}"
        outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
        ]
        description = "assemble {{source}}"
    }

    tool("cc") {
        precompiled_header_type = "msvc"
        pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"
        option = "/MT -Zi -nologo -Gm- -GR- -EHa- -Oi /GS- /D \\\"_USING_V110_SDK71_\\\""

        # Label names may have spaces so pdbname must be quoted.
        command = "$env_setup $cc_wrapper $cl $option /Wall /nologo /FC {{defines}} {{include_dirs}} {{cflags}} $cl_m32_flag {{cflags_c}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\" /source-charset:utf-8"
        depsformat = "msvc"
        outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
        ]
        description = "compile {{source}}"
    }

    tool("cxx") {
        precompiled_header_type = "msvc"
        pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"

        # Label names may have spaces so pdbname must be quoted.
        command = "$env_setup $cc_wrapper $cl /nologo /FC {{defines}} {{include_dirs}} {{cflags}} $cl_m32_flag {{cflags_cc}} /c {{source}} /GS- /Fo{{output}} /Fd\"$pdbname\" /source-charset:utf-8"
        depsformat = "msvc"
        outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
        ]
        description = "compile {{source}}"
    }

    tool("alink") {
        rspfile = "{{output}}.rsp"

        command = "$env_setup $lib /nologo /ignore:4221 {{arflags}} /OUT:{{output}} @$rspfile"
        outputs = [
            "{{target_out_dir}}/{{target_output_name}}{{output_extension}}",
        ]
        default_output_extension = ".lib"
        default_output_dir = "{{target_out_dir}}"

        # inputs_newline works around a fixed per-line buffer size in the linker.
        rspfile_content = "{{inputs_newline}}"
        description = "link {{output}}"
    }

    tool("solink") {
        dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        libname = "${dllname}.lib"
        pdbname = "${dllname}.pdb"
        rspfile = "${dllname}.rsp"

        command = "$env_setup $link /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:$pdbname @$rspfile"
        outputs = [
        dllname,
        libname,
        pdbname,
        ]
        default_output_extension = ".dll"
        default_output_dir = "{{root_out_dir}}"

        link_output = libname
        depend_output = libname
        runtime_outputs = [
        dllname,
        pdbname,
        ]

        # I don't quite understand this.  Aping Chrome's toolchain/win/BUILD.gn.
        restat = true

        # inputs_newline works around a fixed per-line buffer size in the linker.
        rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
        description = "link {{output}}"
    }

    tool("link") {
        exename = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
        pdbname = "$exename.pdb"
        rspfile = "$exename.rsp"

        additional_link_library = "	advapi32.lib kernel32.lib libcmt.lib ntdll.lib ole32.lib rpcrt4.lib"
        options = "/subsystem:console"

        command = "$env_setup $link /safeseh:no $additional_link_library $options /nologo /OUT:$exename /PDB:$pdbname @$rspfile"
        default_output_extension = ".exe"
        default_output_dir = "{{root_out_dir}}"
        outputs = [
        exename,
        ]

        # inputs_newline works around a fixed per-line buffer size in the linker.
        rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
        description = "link {{output}}"
    }

    tool("stamp") {
        command = "$stamp {{output}}"
        description = "stamp {{output}}"
    }
  }
}